scopeName: 'source.build'
name: 'BUILD'
fileTypes: [
  'BUILD'
  'BUCK'
  'WORKSPACE'
]
injections:
  'source.build':
    patterns: [
      {
        include: '#comment'
      }
    ]
patterns: [
  {
    include: '#assignment'
  }
  {
    include: '#function'
  }
]
repository:
  comment:
    name: 'punctuation.comment.build'
    match: '#[^\\n]*\\n'
  string:
    patterns: [
      {
        begin: '"""'
        end: '"""'
        name: 'string.quoted.triple.build'
      }
      {
        match: '(\')([^\']*)(\')'
        captures:
          1: name: 'punctuation.string.single.begin.build'
          2: name: 'string.quoted.single.build'
          3: name: 'punctuation.string.single.end.build'
      }
      {
        match: '(\")([^\"]*)(\")'
        captures:
          1: name: 'punctuation.string.double.begin.build'
          2: name: 'string.quoted.double.build'
          3: name: 'punctuation.string.double.end.build'
      }
    ]
  number:
    match: '\\d+'
    captures:
      0: name: 'constant.numeric.build'
  variable:
    match: '\\w+'
    captures:
      0: name: 'variable.other.build'
  function:
    name: 'meta.function.build'
    begin: '(\\w+)\\s*(\\()'
    beginCaptures:
      1: name: 'storage.type.function.build'
      2: name: 'punctuation.function.parameters.begin.build'
    end: '\\)'
    endCaptures:
      0: name: 'punctuation.function.parameters.end.build'
    patterns: [
      {
        include: '#argument'
      }
    ]
  argument:
    patterns: [
      {
        name: 'mata.argument.build'
        begin: '(\\w+)\\s*(=)\\s*'
        beginCaptures:
          1: name: 'variable.parameter.build'
          2: name: 'keyword.operator.assignment.build'
        end: ',|\\n'
        endCaptures:
          0: name: 'punctuation.separator.build'
        patterns: [
          {
            include: '#expression'
          }
        ]
      }
      {
        include: '#expression'
      }
    ]
  assignment:
    name: 'meta.assignment.build'
    begin: '(\\w+)\\s*(=)\\s*'
    beginCaptures:
      1: name: 'variable.other.build'
      2: name: 'keyword.operator.assignment.build'
    end: '(;|\\n)'
    endCaptures:
      0: name: 'punctuation.statement.end.build'
    patterns: [
      {
        include: '#expression'
      }
    ]
  array:
    name: 'meta.array.build'
    begin: '\\['
    beginCaptures:
      0: name: 'punctuation.array.begin.build'
    end: '\\]'
    endCaptures:
      0: name: 'punctuation.array.end.build'
    patterns: [
      {
        include: '#expression'
      }
      {
        match: '\\s*([,])\\s*'
        captures:
          1: name: 'punctuation.separator.build'
      }
    ]
  dictionary:
    name: 'meta.dictionary.build'
    begin: '\\{'
    beginCaptures:
      0: name: 'punctuation.dictionary.begin.build'
    end: '\\s*\\}'
    endCaptures:
      0: name: 'punctuation.dictionary.end.build'
    patterns: [
      {
        include: '#expression'
      }
      {
        match: '\\s*([,:])\\s*'
        captures:
          1: name: 'punctuation.separator.build'
      }
    ]
  expression:
    name: 'meta.expression.build'
    contentName: 'meta.expression.build'
    patterns: [
      {
        include: '#function'
      }
      {
        include: '#array'
      }
      {
        include: '#dictionary'
      }
      {
        include: '#number'
      }
      {
        include: '#variable'
      }
      {
        include: '#string'
      }
      {
        match: '\\+|\\-|\\%'
        captures:
          0: name: 'operator.build'
      }
    ]
